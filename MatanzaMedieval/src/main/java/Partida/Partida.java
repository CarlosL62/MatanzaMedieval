/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Partida;

import Casillas.Casillas;
import Casillas.Personajes.Enemigos;
import Casillas.Personajes.Jugables;
import Casillas.Terrenos.Arbol;
import Casillas.Terrenos.Terrenos;
import Listas.ListaException;
import com.mycompany.matanzamedieval.Componentes;
import com.mycompany.matanzamedieval.Menu;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JOptionPane;

/**
 *
 * @author carlo
 */
public class Partida extends javax.swing.JFrame {

    /**
     * Creates new form Partida
     */
    private Componentes componentes;
    private Jugables[] jugablesPartida;
    private Menu menu;
    private String usuario;
    private int numeroTablero;
    private int opcionDificultad;

    public Partida(Componentes componentes, Jugables[] jugablesPartida, int numeroTablero, int opcionDifultad, Menu menu) {
        this.control = new ControladorPartida();
        initComponents();
        this.componentes = componentes;
        this.jugablesPartida = jugablesPartida;
        this.numeroTablero = numeroTablero;
        this.opcionDificultad = opcionDifultad;
        this.menu = menu;
        pnlAccionesCombatiente.setVisible(false);
        pnlEstadoPersonajes.setVisible(false);
        usuario = JOptionPane.showInputDialog(null, "Ingrese su nickname:");
        partidaActiva();
    }

    public Partida() {
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnRegresar = new javax.swing.JButton();
        pnlTablero = new javax.swing.JPanel();
        pnlAccionesCombatiente = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btnAtacar = new javax.swing.JButton();
        btnMover = new javax.swing.JButton();
        pnlEstadoPersonajes = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        lblPersonaje1 = new javax.swing.JLabel();
        lblPersonaje2 = new javax.swing.JLabel();
        lblPersonaje3 = new javax.swing.JLabel();
        lblPersonaje4 = new javax.swing.JLabel();
        lblPersonaje5 = new javax.swing.JLabel();
        lblPersonaje6 = new javax.swing.JLabel();
        lblPersonaje7 = new javax.swing.JLabel();
        lblPersonaje8 = new javax.swing.JLabel();
        lblPersonaje9 = new javax.swing.JLabel();
        lblFondo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);
        setSize(new java.awt.Dimension(600, 500));

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnRegresar.setBackground(new java.awt.Color(0, 0, 0));
        btnRegresar.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 0, 14)); // NOI18N
        btnRegresar.setForeground(new java.awt.Color(255, 255, 255));
        btnRegresar.setText("Regresar");
        btnRegresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegresarActionPerformed(evt);
            }
        });
        jPanel1.add(btnRegresar, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 460, 120, -1));

        javax.swing.GroupLayout pnlTableroLayout = new javax.swing.GroupLayout(pnlTablero);
        pnlTablero.setLayout(pnlTableroLayout);
        pnlTableroLayout.setHorizontalGroup(
            pnlTableroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        pnlTableroLayout.setVerticalGroup(
            pnlTableroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );

        jPanel1.add(pnlTablero, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 50, 400, 400));

        jLabel1.setText("Acciones del combatiente");

        btnAtacar.setText("Atacar");
        btnAtacar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtacarActionPerformed(evt);
            }
        });

        btnMover.setText("Mover");
        btnMover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoverActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlAccionesCombatienteLayout = new javax.swing.GroupLayout(pnlAccionesCombatiente);
        pnlAccionesCombatiente.setLayout(pnlAccionesCombatienteLayout);
        pnlAccionesCombatienteLayout.setHorizontalGroup(
            pnlAccionesCombatienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAccionesCombatienteLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlAccionesCombatienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlAccionesCombatienteLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 23, Short.MAX_VALUE))
                    .addComponent(btnAtacar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnMover, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlAccionesCombatienteLayout.setVerticalGroup(
            pnlAccionesCombatienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAccionesCombatienteLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAtacar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnMover)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        jPanel1.add(pnlAccionesCombatiente, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 170, 100));

        jLabel2.setText("Estado de los personajes");

        lblPersonaje1.setText("jLabel3");

        lblPersonaje2.setText("jLabel4");

        lblPersonaje3.setText("jLabel5");

        lblPersonaje4.setText("jLabel6");

        lblPersonaje5.setText("jLabel7");

        lblPersonaje6.setText("jLabel8");

        lblPersonaje7.setText("jLabel9");

        lblPersonaje8.setText("jLabel10");

        lblPersonaje9.setText("jLabel11");

        javax.swing.GroupLayout pnlEstadoPersonajesLayout = new javax.swing.GroupLayout(pnlEstadoPersonajes);
        pnlEstadoPersonajes.setLayout(pnlEstadoPersonajesLayout);
        pnlEstadoPersonajesLayout.setHorizontalGroup(
            pnlEstadoPersonajesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEstadoPersonajesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlEstadoPersonajesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)
                    .addGroup(pnlEstadoPersonajesLayout.createSequentialGroup()
                        .addGroup(pnlEstadoPersonajesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblPersonaje1)
                            .addComponent(lblPersonaje2)
                            .addComponent(lblPersonaje3)
                            .addComponent(lblPersonaje4)
                            .addComponent(lblPersonaje5)
                            .addComponent(lblPersonaje6)
                            .addComponent(lblPersonaje7)
                            .addComponent(lblPersonaje8)
                            .addComponent(lblPersonaje9))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnlEstadoPersonajesLayout.setVerticalGroup(
            pnlEstadoPersonajesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEstadoPersonajesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblPersonaje1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblPersonaje2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblPersonaje3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblPersonaje4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblPersonaje5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblPersonaje6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblPersonaje7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblPersonaje8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblPersonaje9)
                .addContainerGap(54, Short.MAX_VALUE))
        );

        jPanel1.add(pnlEstadoPersonajes, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 170, 170, 270));

        lblFondo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.jpeg"))); // NOI18N
        jPanel1.add(lblFondo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 600, 500));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRegresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegresarActionPerformed

        menu.setLocationRelativeTo(null);
        menu.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnRegresarActionPerformed

    private boolean atacando = false;
    private void btnAtacarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtacarActionPerformed
        // Ataque del personaje
        moviendo = false;
        atacando = true;
        jugablesPartida[0].ataquePersonaje(botonesAsignados, jugablesPartida[0].getCoordenadaY(), jugablesPartida[0].getCoordenadaX());
    }//GEN-LAST:event_btnAtacarActionPerformed

    private boolean moviendo = false;
    private void btnMoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoverActionPerformed
        //Movimiento del personaje
        atacando = false;
        moviendo = true;
        jugablesPartida[0].movimientoPersonaje(botonesAsignados, jugablesPartida[0].getCoordenadaY(), jugablesPartida[0].getCoordenadaX(), control);
    }//GEN-LAST:event_btnMoverActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Partida.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Partida.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Partida.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Partida.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Partida().setVisible(true);
            }
        });
    }

    private ControladorPartida control;
    private Casillas[][] botonesAsignados;

    public void partidaActiva() {

        try {
            //Construye el tablero
            control.construccionTablero(componentes.getTablerosCargados().obtenerValor(numeroTablero));
        } catch (ListaException ex) {
            Logger.getLogger(Partida.class.getName()).log(Level.SEVERE, null, ex);
        }
        botonesAsignados = control.getBotonesAsignados();

        //Seteo del texto en inventario
//        lblCantBombasNormales.setText(String.valueOf(inventario.cantidadBombasPartida[0]));
//        lblCantBombasMisil.setText(String.valueOf(inventario.cantidadBombasPartida[1]));
//        lblCantBombasTorpedo.setText(String.valueOf(inventario.cantidadBombasPartida[2]));
//        lblCantBombasHecatombe.setText(String.valueOf(inventario.cantidadBombasPartida[3]));
//        lblCantBarcos.setText(String.valueOf(inventario.getCantidadBarcosTablero()));
        mostrarTablero();
        //Apagamos las casillas que no sean planicie

        botonesAsignados = control.soloBotones(botonesAsignados, "planicie");

        mostrarTablero();
        JOptionPane.showMessageDialog(null, "Ubique en el tablero a " + jugablesPartida[0].getNickName(), "Ubicar combatiente", JOptionPane.INFORMATION_MESSAGE);
    }

    public void mostrarTablero() {
        int x, y;
        int casillaTamañoFilas = (400 / control.getFilas());
        int casillaTamañoColumnas = (400 / control.getColumnas());
        ButtonController bt = new ButtonController();

        pnlTablero.removeAll();
        for (int i = 0; i < control.getFilas(); i++) {
            y = casillaTamañoFilas * i;
            for (int j = 0; j < control.getColumnas(); j++) {
                resetButton(botonesAsignados[i][j]);
                x = casillaTamañoColumnas * j;
                botonesAsignados[i][j].setCoordenadaY(i);
                botonesAsignados[i][j].setCoordenadaX(j);

                botonesAsignados[i][j].setBackground(Color.gray);

                botonesAsignados[i][j].setBounds(x, y, casillaTamañoColumnas, casillaTamañoFilas);
                botonesAsignados[i][j].setFont(new Font("Arial", Font.PLAIN, (int) (8)));

                botonesAsignados[i][j].addActionListener(bt);
                botonesAsignados[i][j].cambiarIcono();
                pnlTablero.add(botonesAsignados[i][j]);
            }
        }
        pnlTablero.repaint();
        pnlTablero.revalidate();
    }
    
    public void resetButton(JButton boton){
        ActionListener[] acciones = boton.getActionListeners();
        if(acciones.length!=0){
            for (int j = 0; j < acciones.length; j++) {
                boton.removeActionListener(acciones[j]);
            }
        }
    }

    public void statusPersonajes() {

        lblPersonaje1.setText(jugablesPartida[0].estadoPersonaje());

        try {
            lblPersonaje2.setText(enemigos[0].estadoPersonaje());
        } catch (Exception e) {
            lblPersonaje2.setText("");
        }
        try {
            lblPersonaje3.setText(enemigos[1].estadoPersonaje());
        } catch (Exception e) {
            lblPersonaje3.setText("");
        }
        try {
            lblPersonaje4.setText(enemigos[2].estadoPersonaje());
        } catch (Exception e) {
            lblPersonaje4.setText("");
        }
        try {
            lblPersonaje5.setText(enemigos[3].estadoPersonaje());
        } catch (Exception e) {
            lblPersonaje5.setText("");
        }
        try {
            lblPersonaje6.setText(enemigos[4].estadoPersonaje());
        } catch (Exception e) {
            lblPersonaje6.setText("");
        }
        try {
            lblPersonaje7.setText(enemigos[5].estadoPersonaje());
        } catch (Exception e) {
            lblPersonaje7.setText("");
        }
        try {
            lblPersonaje8.setText(enemigos[6].estadoPersonaje());
        } catch (Exception e) {
            lblPersonaje8.setText("");
        }
        try {
            lblPersonaje9.setText(enemigos[7].estadoPersonaje());
        } catch (Exception e) {
            lblPersonaje9.setText("");
        }

    }

    
    public void cerrarPartida(String mensaje) {
        JOptionPane.showMessageDialog(this, mensaje + "\nPuntos: " + control.getPuntosPartida(), "Partida terminada", JOptionPane.INFORMATION_MESSAGE);
        // Se almacena el punteo
        control.almacenarPuntaje(usuario);
        menu.setLocationRelativeTo(null);
        menu.setVisible(true);
        // Se cierra este formulario
        this.dispose();
    }

    //Actividad de cada botón
    private Enemigos[] enemigos;

    private boolean posicionarCombatiente = true;

    private class ButtonController implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {

            for (int i = 0; i < botonesAsignados.length; i++) {
                for (int j = 0; j < botonesAsignados[0].length; j++) {
                    //System.out.println(botonesAsignados[i][j].getCaracterCasillas());
                    if (e.getSource().equals(botonesAsignados[i][j])) {

                        //ACCIONES
                        if (posicionarCombatiente) {

                            //Ubicamos al jugador
                            jugablesPartida[0].setCasillaTerreno(botonesAsignados[i][j], i, j);
                            botonesAsignados[i][j] = jugablesPartida[0];
                            posicionarCombatiente = false;

                            //Se crean los enemigos
                            enemigos = control.asignacionEnemigos(botonesAsignados, opcionDificultad);
                            mostrarTablero();
                            control.encenderBotones(botonesAsignados);

                            pnlEstadoPersonajes.setVisible(true);
                            statusPersonajes();
                        } else {
                            if (botonesAsignados[i][j] instanceof Jugables) {
                                pnlAccionesCombatiente.setVisible(true);
                            } else if (botonesAsignados[i][j] instanceof Terrenos && moviendo) {
                                // Regresamos el valor original a la casilla anterior del personaje
                                botonesAsignados[jugablesPartida[0].getFilaTerreno()][jugablesPartida[0].getColumnaTerreno()] = jugablesPartida[0].getCasillaTerreno();
                                //Ubicamos al jugador
                                jugablesPartida[0].setCasillaTerreno(botonesAsignados[i][j], i, j);
                                botonesAsignados[i][j] = jugablesPartida[0];
                                mostrarTablero();
                                //Volvemos a encender todos los botones
                                moviendo = false;
                                control.encenderBotones(botonesAsignados);
                                pnlAccionesCombatiente.setVisible(false);
                                statusPersonajes();
                            } else if ((botonesAsignados[i][j] instanceof Enemigos || botonesAsignados[i][j] instanceof Arbol) && atacando) {
                                //Ataque
                                for (int k = 0; k < enemigos.length; k++) {
                                    if (botonesAsignados[i][j] == enemigos[k]) {
                                        enemigos[k].setVida(enemigos[k].getVida() - jugablesPartida[0].getDaño());
                                        if (enemigos[k].getVida() <= 0) {
                                            control.setPuntosPartida(control.getPuntosPartida() + enemigos[k].getPuntos());
                                        }
                                        control.muertoCheck(botonesAsignados, enemigos, jugablesPartida);
                                        mostrarTablero();
                                    }
                                }

                                mostrarTablero();
                                statusPersonajes();
                                //Volvemos a encender todos los botones
                                atacando = false;
                                control.encenderBotones(botonesAsignados);
                                pnlAccionesCombatiente.setVisible(false);
                            }

                        }

                        //Se chequea que haya enemigos vivos aún
                        if (control.enemigosMuertos(enemigos)) {
                            cerrarPartida("Felicidades, has defendido al reino");
                            componentes.setOro(componentes.getOro() + 200);
                            break;
                        } else if (jugablesPartida[0].getVida() <= 0) {
                            cerrarPartida("Has perdido, han matado a todos los niños del reino");
                            break;
                        }

//                            if (inventario.cantidadBombasPartida[bombaSeleccionada] > 0) {
//                                if (!botonesAsignados[i][j].isRevelada()) {
//                                    switch (bombaSeleccionada) {
//                                        case 0:
//                                            // Explosión simple
//                                            botonesAsignados = botonesAsignados[i][j].accionBoton(botonesAsignados);
//                                            break;
//                                        case 1:
//                                            // Explosión tipo misil
//                                            botonesAsignados = botonesAsignados[i][j].accionBoton(botonesAsignados);
//                                            botonesAsignados = explosionesBombas.explosionBombaMisil(botonesAsignados, i, j);
//                                            break;
//                                        case 2:
//                                            // Explosión tipo torpedo
//                                            botonesAsignados = botonesAsignados[i][j].accionBoton(botonesAsignados);
//                                            botonesAsignados = explosionesBombas.explosionBombaTorpedo(botonesAsignados, i, j);
//                                            break;
//                                        case 3:
//                                            // Explosión tipo hecatombe
//                                            botonesAsignados = botonesAsignados[i][j].accionBoton(botonesAsignados);
//                                            botonesAsignados = explosionesBombas.explosionBombaHecatombe(botonesAsignados, i, j);
//                                            break;
//                                        default:
//                                            throw new AssertionError();
//                                    }
//
//                                    //Se descuenta 1 de la bomba actual
//                                    inventario.cantidadBombasPartida[bombaSeleccionada] -= 1;
//                                }
//
//                                switch (bombaSeleccionada) {
//                                    case 0:
//                                        lblCantBombasNormales.setText(String.valueOf(inventario.cantidadBombasPartida[bombaSeleccionada]));
//                                        break;
//                                    case 1:
//                                        lblCantBombasMisil.setText(String.valueOf(inventario.cantidadBombasPartida[bombaSeleccionada]));
//                                        break;
//                                    case 2:
//                                        lblCantBombasTorpedo.setText(String.valueOf(inventario.cantidadBombasPartida[bombaSeleccionada]));
//                                        break;
//                                    case 3:
//                                        lblCantBombasHecatombe.setText(String.valueOf(inventario.cantidadBombasPartida[bombaSeleccionada]));
//                                        break;
//                                    default:
//                                        throw new AssertionError();
//                                }
//
//                                lblCantBarcos.setText(String.valueOf(inventario.getCantidadBarcosTablero()));
//                                if (inventario.getCantidadBarcosTablero() <= 0) {
//                                    //Ganó la partida
//                                    cerrarPartida("Ganaste, has defendido a tu nación");
//                                } else {
//                                    if (inventario.cantidadBombasPartida[0] <= 0 && inventario.cantidadBombasPartida[1] <= 0 && inventario.cantidadBombasPartida[2] <= 0 && inventario.cantidadBombasPartida[3] <= 0) {
//                                        System.out.println("Te quedaste sin bombas, mi helmano");
//                                        //jLabel1.setText("No tienes más bombas de este tipo");
//                                        //Perdió la partida
//                                        cerrarPartida("Perdiste, te has quedado sin bombas");
//                                    }
//                                }
//                            }
                    }
                }
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAtacar;
    private javax.swing.JButton btnMover;
    private javax.swing.JButton btnRegresar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblFondo;
    private javax.swing.JLabel lblPersonaje1;
    private javax.swing.JLabel lblPersonaje2;
    private javax.swing.JLabel lblPersonaje3;
    private javax.swing.JLabel lblPersonaje4;
    private javax.swing.JLabel lblPersonaje5;
    private javax.swing.JLabel lblPersonaje6;
    private javax.swing.JLabel lblPersonaje7;
    private javax.swing.JLabel lblPersonaje8;
    private javax.swing.JLabel lblPersonaje9;
    private javax.swing.JPanel pnlAccionesCombatiente;
    private javax.swing.JPanel pnlEstadoPersonajes;
    private javax.swing.JPanel pnlTablero;
    // End of variables declaration//GEN-END:variables
}
